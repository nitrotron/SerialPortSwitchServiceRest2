//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrewduinoCatalogLib
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArduinoCommands.CommandTypes", Namespace="http://schemas.datacontract.org/2004/07/BrewduinoCatalogLib")]
    public enum ArduinoCommandsCommandTypes : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnUnknownCmd = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReturnStatus = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetTemps = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetTemp = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetSensors = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetSensor = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetTempAlarms = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SetTempAlarmHigh = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SetTempAlarmLow = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClearTempAlarms = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetTimer = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SetTimer = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResetAlarm = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetAlarmStatus = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartLogging = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StopLogging = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SetPIDSetPoint = 16,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ArduinoSelfHost")]
public interface ArduinoSelfHost
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/GetRawStatus", ReplyAction="http://tempuri.org/ArduinoSelfHost/GetRawStatusResponse")]
    string GetRawStatus();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/GetRawStatus", ReplyAction="http://tempuri.org/ArduinoSelfHost/GetRawStatusResponse")]
    System.Threading.Tasks.Task<string> GetRawStatusAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/GetStatus", ReplyAction="http://tempuri.org/ArduinoSelfHost/GetStatusResponse")]
    System.Collections.Generic.Dictionary<string, decimal> GetStatus();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/GetStatus", ReplyAction="http://tempuri.org/ArduinoSelfHost/GetStatusResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, decimal>> GetStatusAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/SendCommand", ReplyAction="http://tempuri.org/ArduinoSelfHost/SendCommandResponse")]
    void SendCommand(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/SendCommand", ReplyAction="http://tempuri.org/ArduinoSelfHost/SendCommandResponse")]
    System.Threading.Tasks.Task SendCommandAsync(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/SendCommandWithResponse", ReplyAction="http://tempuri.org/ArduinoSelfHost/SendCommandWithResponseResponse")]
    System.Collections.Generic.Dictionary<string, decimal> SendCommandWithResponse(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/SendCommandWithResponse", ReplyAction="http://tempuri.org/ArduinoSelfHost/SendCommandWithResponseResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, decimal>> SendCommandWithResponseAsync(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/UpdateStatus", ReplyAction="http://tempuri.org/ArduinoSelfHost/UpdateStatusResponse")]
    void UpdateStatus();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArduinoSelfHost/UpdateStatus", ReplyAction="http://tempuri.org/ArduinoSelfHost/UpdateStatusResponse")]
    System.Threading.Tasks.Task UpdateStatusAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ArduinoSelfHostChannel : ArduinoSelfHost, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ArduinoSelfHostClient : System.ServiceModel.ClientBase<ArduinoSelfHost>, ArduinoSelfHost
{
    
    public ArduinoSelfHostClient()
    {
    }
    
    public ArduinoSelfHostClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ArduinoSelfHostClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ArduinoSelfHostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ArduinoSelfHostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string GetRawStatus()
    {
        return base.Channel.GetRawStatus();
    }
    
    public System.Threading.Tasks.Task<string> GetRawStatusAsync()
    {
        return base.Channel.GetRawStatusAsync();
    }
    
    public System.Collections.Generic.Dictionary<string, decimal> GetStatus()
    {
        return base.Channel.GetStatus();
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, decimal>> GetStatusAsync()
    {
        return base.Channel.GetStatusAsync();
    }
    
    public void SendCommand(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text)
    {
        base.Channel.SendCommand(cmd, text);
    }
    
    public System.Threading.Tasks.Task SendCommandAsync(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text)
    {
        return base.Channel.SendCommandAsync(cmd, text);
    }
    
    public System.Collections.Generic.Dictionary<string, decimal> SendCommandWithResponse(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text)
    {
        return base.Channel.SendCommandWithResponse(cmd, text);
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, decimal>> SendCommandWithResponseAsync(BrewduinoCatalogLib.ArduinoCommandsCommandTypes cmd, string text)
    {
        return base.Channel.SendCommandWithResponseAsync(cmd, text);
    }
    
    public void UpdateStatus()
    {
        base.Channel.UpdateStatus();
    }
    
    public System.Threading.Tasks.Task UpdateStatusAsync()
    {
        return base.Channel.UpdateStatusAsync();
    }
}
